from fastapi import FastAPI
from pymongo import MongoClient
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import json

# Initialize FastAPI and MongoDB client
app = FastAPI()
client = MongoClient("mongodb+srv://per18044:mEANFqihdP9BPGwt@cluster0.oowe8qv.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
db = client["calgaryeconomics"]
collection = db["economicsdata"]

# Define the endpoint to insert data samples from the JSON file into MongoDB
@app.post("/insert_data_samples")
def insert_data_samples():
    file_path = r"C:\Users\erosp\OneDrive\Desktop\Working\economics.js"
    
    # Load JSON data from the file
    with open(file_path, 'r') as file:
        data = json.load(file)
    
    # Insert each entry as a document in MongoDB
    for entry in data:
        entry['date'] = pd.to_datetime(entry['date'])
        collection.update_one({"date": entry['date']}, {"$set": entry}, upsert=True)
    
    return {"message": "Data samples inserted successfully"}

# Define the endpoint to analyze the data and generate visualizations
@app.get("/analyze_data")
def analyze_data():
    # Query data from MongoDB for the specified date range
    data = list(collection.find({
        "date": {
            "$gte": datetime(2024, 1, 1),
            "$lte": datetime(2024, 11, 30)
        }
    }))

    # Extract specific metrics for plotting with safe default values
    dates = [entry["date"].strftime("%Y-%m") for entry in data]
    wage_rates = [entry.get("calgary_cma_average_hourly_wage_rate", 0) for entry in data]
    residential_permits = [entry.get("calgary_building_permits_residential_value", 0) for entry in data]
    non_residential_permits = [entry.get("calgary_building_permits_non_residential_value", 0) for entry in data]
    total_housing_starts_city = [entry.get("calgary_city_total_housing_starts_units", 0) for entry in data]
    total_housing_starts_cma = [entry.get("calgary_cma_total_housing_starts_units", 0) for entry in data]
    retail_sales = [entry.get("calgary_cer_retail_sales_billions", 0) for entry in data]
    inflation_rate_change = [entry.get("calgary_cma_inflation_rate_change", 0) for entry in data]

    # Plotting average hourly wage rate
    plt.figure(figsize=(10, 6))
    plt.plot(dates, wage_rates, marker='o', color='blue')
    plt.title("Calgary Average Hourly Wage Rate (Jan 2024 - Nov 2024)")
    plt.xlabel("Date")
    plt.ylabel("Average Hourly Wage Rate ($)")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("calgary_wage_rate_changes.png")

    # Plotting residential building permits
    plt.figure(figsize=(10, 6))
    plt.bar(dates, residential_permits, color='purple')
    plt.title("Calgary Residential Building Permits Value (Jan 2024 - Nov 2024)")
    plt.xlabel("Date")
    plt.ylabel("Residential Permits Value ($)")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("calgary_residential_permits.png")

    # Plotting non-residential building permits
    plt.figure(figsize=(10, 6))
    plt.bar(dates, non_residential_permits, color='orange')
    plt.title("Calgary Non-Residential Building Permits Value (Jan 2024 - Nov 2024)")
    plt.xlabel("Date")
    plt.ylabel("Non-Residential Permits Value ($)")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("calgary_non_residential_permits.png")

    # Plotting city total housing starts
    plt.figure(figsize=(10, 6))
    plt.plot(dates, total_housing_starts_city, marker='x', color='green')
    plt.title("Calgary City Total Housing Starts (Units) (Jan 2024 - Nov 2024)")
    plt.xlabel("Date")
    plt.ylabel("Total Housing Starts (City)")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("calgary_housing_starts_city.png")

    # Plotting CMA total housing starts
    plt.figure(figsize=(10, 6))
    plt.plot(dates, total_housing_starts_cma, marker='x', color='brown')
    plt.title("Calgary CMA Total Housing Starts (Units) (Jan 2024 - Nov 2024)")
    plt.xlabel("Date")
    plt.ylabel("Total Housing Starts (CMA)")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("calgary_housing_starts_cma.png")

    # Plotting retail sales
    plt.figure(figsize=(10, 6))
    plt.plot(dates, retail_sales, marker='x', color='teal')
    plt.title("Calgary Retail Sales (Billions) (Jan 2024 - Nov 2024)")
    plt.xlabel("Date")
    plt.ylabel("Retail Sales (Billions)")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("calgary_retail_sales.png")

    # Plotting inflation rate change
    plt.figure(figsize=(10, 6))
    plt.plot(dates, inflation_rate_change, marker='o', color='red')
    plt.title("Calgary CMA Inflation Rate Change (Jan 2024 - Nov 2024)")
    plt.xlabel("Date")
    plt.ylabel("Inflation Rate Change (%)")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("calgary_inflation_rate_change.png")

    return {"message": "Data analysis and visualizations completed"}

# Run FastAPI app with Uvicorn
# Command to run: uvicorn <filename>:app --reload
